function fRoomPreviewElement2(hObject,eventdata,handles,aPlane)
% Pré-Visualiza elemento 
% Código extraido de wVis tOpenFile_Callback cria cVis se ele ainda não existir

%Carrega dados dos planos
aData=get(handles.tTablePlanes,'Data');
[nTotPla,~]=size(aData);

% Insere nos dados atuais os novos planos para pré-isualização
nSizePrev=size(aPlane,1);
for nP=1:nSizePrev
    aData{nTotPla+nP,1}=nTotPla+nP;
    aData{nTotPla+nP,2}=-(nTotPla+nP);
    aData{nTotPla+nP,3}=1;
    aData{nTotPla+nP,4}='Preview';
    aData{nTotPla+nP,5}=num2str(aPlane{nP,1}(1)); aData{nTotPla+nP,6}=num2str(aPlane{nP,1}(2)); aData{nTotPla+nP,7}=num2str(aPlane{nP,1}(3));
    aData{nTotPla+nP,8}=num2str(aPlane{nP,2}(1)); aData{nTotPla+nP,9}=num2str(aPlane{nP,2}(2)); aData{nTotPla+nP,10}=num2str(aPlane{nP,2}(3));
    aData{nTotPla+nP,11}=num2str(aPlane{nP,3}(1)); aData{nTotPla+nP,12}=num2str(aPlane{nP,3}(2)); aData{nTotPla+nP,13}=num2str(aPlane{nP,3}(3));
    aData{nTotPla+nP,14}=num2str(aPlane{nP,4}(1)); aData{nTotPla+nP,15}=num2str(aPlane{nP,4}(2)); aData{nTotPla+nP,16}=num2str(aPlane{nP,4}(3));
end

[nTotPlaPr,~]=size(aData);  % lê o número de planos para comparar com o arquivo de visualização (nTotPl==nTotVis)

% Carrega informações da visualização
aDataVis=get(handles.tTableVis,'Data');
for k=1:nTotPla %Loop nos planos exibidos, salvando dados 
    nColor=aDataVis{k,3};
    nPosColor=find(nColor=='#');
    nColor=hex2rgb(nColor(nPosColor:nPosColor+6));
    cVis{k,1}=k;
    cVis{k,2}=nColor(1);  % Cor R
    cVis{k,3}=nColor(2);  % Cor G
    cVis{k,4}=nColor(3);  % Cor B
    cVis{k,5}=aDataVis{k,4};  % Transparência
end

[nTotVis,~]=size(cVis); % lê o número de planos para comparar com o arquivo de visualização (nTotPl==nTotVis)

% Verifica compatibilidade dos arquivos
if nTotVis>nTotPlaPr
    load([spcodeDir '\bLangDef.tlx'],'-mat','ErrorDlg');  % Abre Arquivo de Idioma
    errordlg([ErrorDlg.VisualizationFileCorrupted ' (E0159)']);
    return  
elseif nTotVis<nTotPlaPr % Inclui novos planos com valores padrão
    cDataPreview={nTotPlaPr};
    cVis(nTotVis+1:nTotPlaPr,1)=cDataPreview;
    cVis(nTotVis+1:nTotPlaPr,2:4)={0.5}; % Define toda superfície como cinza
    cVis(nTotVis+1:nTotPlaPr,5)={0.2}; % Define transparência = 20%  (OBS: value should be inverted to 1=transparency 0=opaque)
end

%Identifica o tipo de visualização
nCol=get(handles.tVisPrevColour,'Value');
if nCol==0 %Preto e Branco
    lCor=0;
    sColor=zeros(nTotPlaPr+1,3);
else %Colorido
    lCor=1;
    sColor=cell2mat([cVis(:,2) cVis(:,3) cVis(:,4)]);
end
nTy=get(handles.tVisPrevSolid,'Value');
if nTy==0 %Sólido
    lTipo=0;
else %Estrutura de Arame
    lTipo=1;
    Trans = cell2mat(cVis(:,5));
    Trans=1-Trans; % inverte
end

aV=aData(:,5:16);
aV=cellfun(@str2num,aV);

% Redefine 'Ground' para plotagem:
nExt=3; % Define quantos métros além dos planos externos máximos será exibido [after: defined by user !?]
nXMax=max(max(aV([1:12 14:end],[1 4 7 10])));
nXMin=min(min(aV([1:12 14:end],[1 4 7 10])));
nYMax=max(max(aV([1:12 14:end],[2 5 8 11])));
nYMin=min(min(aV([1:12 14:end],[2 5 8 11])));
aV(13,[1 10])=nXMax+nExt;
aV(13,[4 7])=nXMin-nExt;
aV(13,[2 5])=nYMax+nExt;
aV(13,[8 11])=nYMin-nExt;

% Prepara matriz para plotagem 
nTotPl = size(aData,1);
aVX=aV(:,1:3:end);
aVY=aV(:,2:3:end);
aVZ=aV(:,3:3:end);
aVX(:,5)=aVX(:,1);
aVY(:,5)=aVY(:,1);
aVZ(:,5)=aVZ(:,1);
axes(handles.tAxesPreview)

% Desenha Perspectiva 3d
%rRetirei parte que apagava plano anterior

for iPl=16:nTotPl  %Planos adicionais
  if lCor
    if lTipo == 0
      plot3(aVX(iPl,:),aVY(iPl,:),aVZ(iPl,:),'Color',sColor(iPl,:),'Tag',num2str(aData{iPl,1}))
    else
      fill3(aVX(iPl,:),aVY(iPl,:),aVZ(iPl,:),sColor(iPl,:),'FaceAlpha',Trans(iPl,:),'Tag',num2str(aData{iPl,1}))
    end
  else
    if lTipo == 0
      plot3(aVX(iPl,:),aVY(iPl,:),aVZ(iPl,:),'Color',sColor(iPl,:),'Tag',num2str(aData{iPl,1}))
    else
      fill3(aVX(iPl,:),aVY(iPl,:),aVZ(iPl,:),sColor(iPl,:),'FaceAlpha',Trans(iPl,:),'Tag',num2str(aData{iPl,1}))
    end
  end
end

axis equal

set(get(gca,'XLabel'),'String','X','FontWeight','bold','FontSize',12)
set(get(gca,'YLabel'),'String','Y','FontWeight','bold','FontSize',12)
set(get(gca,'ZLabel'),'String','N','FontWeight','bold','FontSize',12)
